; (function (root, factory) {
  if (typeof exports === "object" && typeof module === "object") module.exports = factory();
  else if (typeof define === "function" && define.amd) define([], factory);
  else if (typeof exports === "object") exports.chineseLunar = factory();
  else root.chineseLunar = factory();
})(typeof globalThis !== "undefined" ? globalThis : (typeof window !== "undefined" ? window : (typeof global !== "undefined" ? global : this)), function () {
  return (function (modules) {
    var installedModules = {};

    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) return installedModules[moduleId].exports;
      var module = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      module.l = true;
      return module.exports;
    }

    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function (exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function (exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function (value, mode) {
      if (mode & 1) value = __webpack_require__(value);
      if (mode & 8) return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
      var ns = Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value: value });
      if (mode & 2 && typeof value != "string") {
        for (var key in value) __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));
      }
      return ns;
    };
    __webpack_require__.n = function (module) {
      var getter = module && module.__esModule ? function () { return module['default']; } : function () { return module; };
      __webpack_require__.d(getter, 'a', getter);
      return getter;
    };
    __webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    __webpack_require__.p = "";

    return __webpack_require__(22);
  })([
    /* 0 */
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TIAN_GAN = exports.DI_ZHI = exports.NA_YIN_ARR = exports.GAN_ZHI_RELATION_SHI_SHEN = exports.SHI_SHEN_TYPE = exports.SHI_SHEN_MAP = exports.DI_ZHI_HIDE_GAN_MAP = exports.WU_XING_XIANG_SHENG_ARR = exports.WU_XING_XIANG_KE_ARR = exports.GAN_ZHI_WU_XING_MAP = exports.TIAN_GAN_XIANG_CHONG_ARR = exports.TIAN_GAN_WU_HE_ARR = exports.DI_ZHI_SAN_HUI_ARR = exports.DI_ZHI_SAN_HE_ARR = exports.DI_ZHI_LIU_HE_ARR = exports.DI_ZHI_XIANG_CHONG_ARR = exports.DI_ZHI_XIANG_XING_ARR = exports.DI_ZHI_XIANG_PO_ARR = exports.DI_ZHI_XIANG_HAI_ARR = exports.GAN_ZHI_MONTH = exports.GAN_ZHI_DAY = exports.GAN_ZHI_BASE = exports.SHI_CHEN_GAN_ZHI = exports.GAN_SHI_QI_MEN_JU = exports.GAN_SHI_GAN_ZHI = void 0;

      exports.TIAN_GAN = "甲乙丙丁戊己庚辛壬癸".split("");
      exports.DI_ZHI = "子丑寅卯辰巳午未申酉戌亥".split("");
      exports.NA_YIN_ARR = "海中金|炉中火|大林木|路旁土|剑锋金|山头火|涧下水|城头土|白蜡金|杨柳木|泉中水|屋上土|霹雳火|松柏木|长流水|沙中金|山下火|平地木|壁上土|金箔金|覆灯火|天河水|大驿土|钗钏金|桑柘木|大溪水|沙中土|天上火|石榴木|大海水".split("|");
      exports.GAN_ZHI_RELATION_SHI_SHEN = {
        同性: { 生: "食神", 克: "七杀", 被生: "偏印", 被克: "偏财", 同: "比肩" },
        异性: { 生: "伤官", 克: "正官", 被生: "正印", 被克: "正财", 同: "劫财" }
      };
      exports.SHI_SHEN_TYPE = {
        BI_JIAN: "比肩",
        JIE_CAI: "劫财",
        SHI_SHEN: "食神",
        SHANG_GUAN: "伤官",
        PIAN_CAI: "偏财",
        ZHENG_CAI: "正财",
        QI_SHA: "七杀",
        ZHENG_GUAN: "正官",
        PIAN_YIN: "偏印",
        ZHENG_YIN: "正印"
      };
      exports.SHI_SHEN_MAP = {
        比肩: "Би견", 劫财: "겁재", 食神: "식신", 伤官: "상관", 偏财: "편재", 正财: "정재", 七杀: "편관", 正官: "정관", 偏印: "편인", 正印: "정인"
      };
      exports.DI_ZHI_HIDE_GAN_MAP = {
        子: ["癸"], 丑: ["癸", "辛", "己"], 寅: ["甲", "丙", "戊"], 卯: ["乙"], 辰: ["乙", "戊", "癸"], 巳: ["庚", "丙", "戊"], 午: ["丙", "己", "丁"], 未: ["乙", "己", "丁"], 申: ["戊", "庚", "壬"], 酉: ["辛"], 戌: ["辛", "丁", "戊"], 亥: ["甲", "壬"]
      };
      exports.WU_XING_XIANG_SHENG_ARR = ["木", "火", "土", "金", "水"];
      exports.WU_XING_XIANG_KE_ARR = ["木", "土", "水", "火", "金"];
      exports.GAN_ZHI_WU_XING_MAP = { 甲: "木", 乙: "木", 丙: "火", 丁: "火", 戊: "土", 己: "土", 庚: "金", 辛: "金", 壬: "水", 癸: "水", 子: "水", 丑: "土", 寅: "木", 卯: "木", 辰: "土", 巳: "火", 午: "火", 未: "土", 申: "金", 酉: "金", 戌: "土", 亥: "水" };
      exports.TIAN_GAN_XIANG_CHONG_ARR = ["甲庚", "乙辛", "丙壬", "丁癸"];
      exports.TIAN_GAN_WU_HE_ARR = ["甲己", "乙庚", "丙辛", "丁壬", "戊癸"];
      exports.DI_ZHI_SAN_HUI_ARR = ["寅卯辰", "巳午未", "申酉戌", "亥子丑"];
      exports.DI_ZHI_SAN_HE_ARR = ["申子辰", "巳酉丑", "寅午戌", "亥卯未"];
      exports.DI_ZHI_LIU_HE_ARR = ["子丑", "寅亥", "卯戌", "辰酉", "巳申", "午未"];
      exports.DI_ZHI_XIANG_CHONG_ARR = ["子午", "丑未", "寅申", "卯酉", "辰戌", "巳亥"];
      exports.DI_ZHI_XIANG_XING_ARR = [["寅", "巳", "申"], ["丑", "未", "戌"]];
      exports.DI_ZHI_XIANG_PO_ARR = ["子酉", "卯午", "辰丑", "戌未", "寅亥", "巳申"];
      exports.DI_ZHI_XIANG_HAI_ARR = ["子未", "丑午", "寅巳", "卯辰", "申亥", "酉戌"];
      exports.GAN_ZHI_MONTH = ["甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉", "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛巳", "壬午", "癸未", "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳", "甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯", "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑", "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌", "癸亥"];
      exports.GAN_ZHI_DAY = ["甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉", "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛巳", "壬午", "癸未", "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳", "甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯", "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑", "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌", "癸亥"];
      exports.GAN_ZHI_BASE = exports.GAN_ZHI_DAY.slice();
      exports.SHI_CHEN_GAN_ZHI = {
        "甲子": 1, "乙丑": 2, "丙寅": 3, "丁卯": 4, "戊辰": 5, "己巳": 6, "庚午": 7, "辛未": 8, "壬申": 9, "癸酉": 10,
        "甲戌": 11, "乙亥": 12, "丙子": 13, "丁丑": 14, "戊寅": 15, "己卯": 16, "庚辰": 17, "辛巳": 18, "壬午": 19, "癸未": 20,
        "甲申": 21, "乙酉": 22, "丙戌": 23, "丁亥": 24, "戊子": 25, "己丑": 26, "庚寅": 27, "辛卯": 28, "壬辰": 29, "癸巳": 30,
        "甲午": 31, "乙未": 32, "丙申": 33, "丁酉": 34, "戊戌": 35, "己亥": 36, "庚子": 37, "辛丑": 38, "壬寅": 39, "癸卯": 40,
        "甲辰": 41, "乙巳": 42, "丙午": 43, "丁未": 44, "戊申": 45, "己酉": 46, "庚戌": 47, "辛亥": 48, "壬子": 49, "癸丑": 50,
        "甲寅": 51, "乙卯": 52, "丙辰": 53, "丁巳": 54, "戊午": 55, "己未": 56, "庚申": 57, "辛酉": 58, "壬戌": 59, "癸亥": 60
      };
      exports.GAN_SHI_GAN_ZHI = exports.GAN_ZHI_DAY.slice();
      exports.GAN_SHI_QI_MEN_JU = [
        { winterSolstice: "上元", summerSolstice: "上元", ju: 1 },
        { winterSolstice: "中元", summerSolstice: "中元", ju: 2 },
        { winterSolstice: "下元", summerSolstice: "下元", ju: 3 },
        { winterSolstice: "下元", summerSolstice: "下元", ju: 4 },
        { winterSolstice: "中元", summerSolstice: "中元", ju: 5 },
        { winterSolstice: "上元", summerSolstice: "上元", ju: 6 },
        { winterSolstice: "上元", summerSolstice: "上元", ju: 7 },
        { winterSolstice: "中元", summerSolstice: "中元", ju: 8 },
        { winterSolstice: "下元", summerSolstice: "下元", ju: 9 }
      ];
    },
    /* 1 */
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getNearSolarTerm = exports.getYearSolarTerm = exports.getSolarTerm = void 0;

      var solarTermMap = {
        1: { 1: "小寒", 2: "大寒" }, 2: { 1: "立春", 2: "雨水" }, 3: { 1: "惊蛰", 2: "春分" }, 4: { 1: "清明", 2: "谷雨" },
        5: { 1: "立夏", 2: "小满" }, 6: { 1: "芒种", 2: "夏至" }, 7: { 1: "小暑", 2: "大暑" }, 8: { 1: "立秋", 2: "处暑" },
        9: { 1: "白露", 2: "秋分" }, 10: { 1: "寒露", 2: "霜降" }, 11: { 1: "立冬", 2: "小雪" }, 12: { 1: "大雪", 2: "冬至" }
      };

      var fmt = __webpack_require__(2);
      var cache = {};

      function computeTerm(year, month) {
        var r = {};
        for (var m in solarTermMap) {
          for (var s in solarTermMap[m]) {
            (function (y, mo, idx, map, name) {
              var u = 31556925974.7 * y / 1e3;
              var a = 2 * Math.PI * u;
              var c = 1.00004 * mo + 1.916 * Math.sin(a) + 0.02 * Math.sin(2 * a);
              var f = Math.PI / 180 * c;
              var ss = Math.tan(f);
              var lc = Math.cos(f);
              var d = 23.45 * Math.sin(180 / Math.PI * (0.398 * Math.sin(2 * a) + 0.17 * Math.sin(a - 0.26) - 0.07 * Math.sin(a + 0.26) - 0.05 * Math.sin(2 * a - 0.26) + 0.04 * Math.sin(a - 0.52) - 0.04 * Math.sin(2 * a + 0.26) - 0.03 * Math.sin(a + 0.52) - 0.02 * Math.sin(a - 2.86) + 0.02 * Math.sin(3 * a) + 0.02 * Math.sin(a - 1.05)));
              var h = 180 / Math.PI * Math.atan(0.917 * ss);
              var p = 180 / Math.PI * Math.asin(Math.sin(d * Math.PI / 180) * Math.sin(180 / Math.PI * h));
              if (c >= 0 && c < 90) p = h; else if (c >= 90 && c < 270) p = h + 180; else if (c >= 270 && c < 360) p = h + 360;
              var mlt = p - c;
              var g = 24 * mlt / 360;
              var date = new Date();
              date.setTime(31556925974.7 * idx + g * 36e5 - 22091232e5);
              date.setUTCHours(date.getUTCHours() - 8);
              r[name] = date;
            })(new Date().getFullYear(), month, year - 1900, solarTermMap, solarTermMap[m][s]);
          }
        }
        return r;
      }

      function getCacheYearMonth(y, m) {
        cache[y] = cache[y] || {};
        if (cache[y][m]) return cache[y][m];
        cache[y][m] = {
          current: computeTerm(y, m),
          prev: computeTerm(y, m - 1),
          next: computeTerm(y, m + 1)
        };
        return cache[y][m];
      }

      exports.getNearSolarTerm = function (date) {
        var fmtDate = fmt.formatDate(date);
        var year = fmtDate.year;
        var month = fmtDate.month;
        var day = fmtDate.day;
        var hour = fmtDate.hour;
        var minute = fmtDate.minute;
        var second = fmtDate.second;

        var monthEdge = (function (y, m) {
          var d = new Date(y, m - 1, 1);
          d.setHours(12); d.setMinutes(0); d.setSeconds(0);
          var o = d.getTime();
          return { prev: new Date(o - 864e5), current: d, next: new Date(o + 864e5) };
        })(year, month);

        var data = {
          current: getCacheYearMonth(year, month).current,
          prev: (fmt.formatDate(monthEdge.prev).year === year ? getCacheYearMonth(fmt.formatDate(monthEdge.prev).year, fmt.formatDate(monthEdge.prev).month).current : getCacheYearMonth(year, month - 1).current),
          next: (fmt.formatDate(monthEdge.next).year === year ? getCacheYearMonth(fmt.formatDate(monthEdge.next).year, fmt.formatDate(monthEdge.next).month).current : getCacheYearMonth(year, month + 1).current)
        };

        var map = {};
        for (var k in data) {
          var part = data[k];
          for (var n in part) {
            var v = part[n];
            map[v.name] = v.time;
          }
        }

        var result = {};
        for (var name in map) {
          var dtime = map[name];
          var fd = fmt.formatDate(dtime);
          if (fd.day === day && (fd.hour > hour || (fd.hour === hour && (fd.minute > minute || (fd.minute === minute && fd.second >= second))))) {
            result.nextSolarTerm = name;
            result.nextSolarTermTime = fmt.formatDate(map[name]);
          } else {
            result.prevSolarTerm = name;
            result.prevSolarTermTime = fmt.formatDate(map[name]);
          }
        }
        return result;
      };

      exports.getYearSolarTerm = function (year, month) {
        var cacheYear = cache[year] || (cache[year] = {});
        if (cacheYear[month]) return cacheYear[month];
        cacheYear[month] = {
          current: (function (y, m) {
            var r = {};
            for (var mm in solarTermMap) {
              for (var s in solarTermMap[mm]) {
                (function (yy, mo, idx, map, name) {
                  var u = 31556925974.7 * yy / 1e3;
                  var a = 2 * Math.PI * u;
                  var c = 1.00004 * mo + 1.916 * Math.sin(a) + 0.02 * Math.sin(2 * a);
                  var f = Math.PI / 180 * c;
                  var ss = Math.tan(f);
                  var d = 23.45 * Math.sin(180 / Math.PI * (0.398 * Math.sin(2 * a) + 0.17 * Math.sin(a - 0.26) - 0.07 * Math.sin(a + 0.26) - 0.05 * Math.sin(2 * a - 0.26) + 0.04 * Math.sin(a - 0.52) - 0.04 * Math.sin(2 * a + 0.26) - 0.03 * Math.sin(a + 0.52) - 0.02 * Math.sin(a - 2.86) + 0.02 * Math.sin(3 * a) + 0.02 * Math.sin(a - 1.05)));
                  var h = 180 / Math.PI * Math.atan(0.917 * ss);
                  var p = 180 / Math.PI * Math.asin(Math.sin(d * Math.PI / 180) * Math.sin(180 / Math.PI * h));
                  if (c >= 0 && c < 90) p = h; else if (c >= 90 && c < 270) p = h + 180; else if (c >= 270 && c < 360) p = h + 360;
                  var mlt = p - c;
                  var g = 24 * mlt / 360;
                  var date = new Date();
                  date.setTime(31556925974.7 * idx + g * 36e5 - 22091232e5);
                  date.setUTCHours(date.getUTCHours() - 8);
                  r[name] = date;
                })(year - 1900, month, year - 1900, solarTermMap, solarTermMap[mm][s]);
              }
            }
            return r;
          })(year, month).current
        };
        return cacheYear[month].current;
      };

      exports.getSolarTerm = function (year, month) {
        var cacheYear = cache[year] || (cache[year] = {});
        if (cacheYear[month]) return cacheYear[month];
        cacheYear[month] = {
          current: (function (y, m) {
            var r = {};
            for (var mm in solarTermMap) {
              for (var s in solarTermMap[mm]) {
                (function (yy, mo, idx, map, name) {
                  var u = 31556925974.7 * yy / 1e3;
                  var a = 2 * Math.PI * u;
                  var c = 1.00004 * mo + 1.916 * Math.sin(a) + 0.02 * Math.sin(2 * a);
                  var f = Math.PI / 180 * c;
                  var ss = Math.tan(f);
                  var d = 23.45 * Math.sin(180 / Math.PI * (0.398 * Math.sin(2 * a) + 0.17 * Math.sin(a - 0.26) - 0.07 * Math.sin(a + 0.26) - 0.05 * Math.sin(2 * a - 0.26) + 0.04 * Math.sin(a - 0.52) - 0.04 * Math.sin(2 * a + 0.26) - 0.03 * Math.sin(a + 0.52) - 0.02 * Math.sin(a - 2.86) + 0.02 * Math.sin(3 * a) + 0.02 * Math.sin(a - 1.05)));
                  var h = 180 / Math.PI * Math.atan(0.917 * ss);
                  var p = 180 / Math.PI * Math.asin(Math.sin(d * Math.PI / 180) * Math.sin(180 / Math.PI * h));
                  if (c >= 0 && c < 90) p = h; else if (c >= 90 && c < 270) p = h + 180; else if (c >= 270 && c < 360) p = h + 360;
                  var mlt = p - c;
                  var g = 24 * mlt / 360;
                  var date = new Date();
                  date.setTime(31556925974.7 * idx + g * 36e5 - 22091232e5);
                  date.setUTCHours(date.getUTCHours() - 8);
                  r[name] = date;
                })(year - 1900, month, year - 1900, solarTermMap, solarTermMap[mm][s]);
              }
            }
            return r;
          })(year, month).current
        };
        return cacheYear[month].current;
      };
    },
    /* 2 */
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatDate = void 0;
      var pad = function (n) { return ("00" + n).substr(String(n).length); };
      exports.formatDate = function (d) {
        return {
          year: d.getFullYear(),
          month: d.getMonth() + 1,
          day: d.getDate(),
          hour: d.getHours(),
          minute: d.getMinutes(),
          second: d.getSeconds(),
          week: d.getDay(),
          str: d.getFullYear() + "-" + pad(d.getMonth() + 1) + "-" + pad(d.getDate()) + " " + pad(d.getHours()) + ":" + pad(d.getMinutes()) + ":" + pad(d.getSeconds())
        };
      };
    },
    /* 3 */
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var monthCn = __webpack_require__(4);
      var dayCn = __webpack_require__(5);
      // Simple lunar class used by conversions
      function LunarDate(year, month, day, isLeap) {
        this.year = year;
        this.month = month;
        this.day = day;
        this.isLeap = isLeap;
        this.monthCn = this.getMonthCn();
        this.dayCn = this.getDayCn();
        this.yearCn = this.getYearCn();
      }
      LunarDate.prototype.getMonthCn = function () {
        var m = monthCn.monthCn[this.month - 1];
        return this.isLeap ? "闰" + m : m;
      };
      LunarDate.prototype.getDayCn = function () { return dayCn.dayCn[this.day - 1]; };
      LunarDate.prototype.getYearCn = function () {
        var s = String(this.year);
        return monthCn.yearCn[s[0]] + monthCn.yearCn[s[1]] + monthCn.yearCn[s[2]] + monthCn.yearCn[s[3]] + "年";
      };
      module.exports = LunarDate;
      module.exports.default = LunarDate;
    },
    /* 4 */
    function (module, exports) {
      "use strict";
      exports.monthCn = ["正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "腊"];
      exports.yearCn = ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"];
    },
    /* 5 */
    function (module, exports) {
      "use strict";
      exports.dayCn = ["初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十", "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十", "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十"];
    },
    /* 6 */
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.solarToLunar = exports.lunarToSolar = void 0;
      var LunarDate = __webpack_require__(3);
      var lunarData = __webpack_require__(7);
      __webpack_require__(4);
      __webpack_require__(5);
      exports.solarToLunar = function (y, m, d) {
        var res = new LunarDate(y, m, d);
        lunarData.lunarData.forEach(function (o) {
          var base = new Date(o.year, o.month - 1, o.day);
          var diff = Math.ceil((base - new Date(y, m - 1, d)) / 864e5);
          if (diff >= 0 && diff < o.term) {
            res = new LunarDate(o.lunarYear, o.lunarMonth, o.lunarDay + diff, o.isLeap);
          }
        });
        return res;
      };
      exports.lunarToSolar = function (ly, lm, ld, isLeap) {
        var out = {};
        lunarData.lunarData.forEach(function (o) {
          var ok = o.lunarYear === ly && o.lunarMonth === lm && o.lunarDay === ld;
          if (isLeap) ok = ok && o.isLeap === isLeap;
          var dt = new Date(o.year, o.month - 1, o.day);
          if (ok) out = { year: dt.getFullYear(), month: dt.getMonth() + 1, day: dt.getDate() };
        });
        return out;
      };
    },
    /* 7 */
    function (module, exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.lunarData = void 0;
      exports.lunarData = [
        { lunarYear: 1900, lunarMonth: 1, lunarDay: 1, isLeap: false, year: 1900, month: 1, day: 31, term: 30 },
        { lunarYear: 1900, lunarMonth: 2, lunarDay: 1, isLeap: false, year: 1900, month: 3, day: 2, term: 29 },
        { lunarYear: 1900, lunarMonth: 3, lunarDay: 1, isLeap: false, year: 1900, month: 3, day: 31, term: 30 },
        { lunarYear: 1900, lunarMonth: 4, lunarDay: 1, isLeap: false, year: 1900, month: 4, day: 30, term: 30 },
        { lunarYear: 1900, lunarMonth: 5, lunarDay: 1, isLeap: false, year: 1900, month: 5, day: 30, term: 29 },
        { lunarYear: 1900, lunarMonth: 6, lunarDay: 1, isLeap: false, year: 1900, month: 6, day: 28, term: 30 },
        { lunarYear: 1900, lunarMonth: 7, lunarDay: 1, isLeap: false, year: 1900, month: 7, day: 28, term: 29 },
        { lunarYear: 1900, lunarMonth: 8, lunarDay: 1, isLeap: false, year: 1900, month: 8, day: 26, term: 30 },
        { lunarYear: 1900, lunarMonth: 8, lunarDay: 1, isLeap: true, year: 1900, month: 9, day: 25, term: 29 },
        { lunarYear: 1900, lunarMonth: 9, lunarDay: 1, isLeap: false, year: 1900, month: 10, day: 24, term: 30 },
        { lunarYear: 1900, lunarMonth: 10, lunarDay: 1, isLeap: false, year: 1900, month: 11, day: 23, term: 29 },
        { lunarYear: 1900, lunarMonth: 11, lunarDay: 1, isLeap: false, year: 1900, month: 12, day: 22, term: 30 }
      ];
    },
    /* 8 */
    function (module, exports, __webpack_require__) {
      "use strict";
      // placeholder module in original bundle (kept for structure)
      module.exports = {};
    },
    /* 9 */
    function (module, exports, __webpack_require__) {
      "use strict";
      // placeholder module in original bundle (kept for structure)
      module.exports = {};
    },
    /* 10 */
    function (module, exports, __webpack_require__) {
      "use strict";
      // placeholder module in original bundle (kept for structure)
      module.exports = {};
    },
    /* 11 */
    function (module, exports, __webpack_require__) {
      "use strict";
      // placeholder module in original bundle (kept for structure)
      module.exports = {};
    },
    /* 12 */
    function (module, exports, __webpack_require__) {
      "use strict";
      // placeholder module in original bundle (kept for structure)
      module.exports = {};
    },
    /* 13 */
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.solarToLunar = void 0;
      var LunarDate = __webpack_require__(3);
      var lunarData = __webpack_require__(7);
      exports.solarToLunar = function (y, m, d) {
        var res = new LunarDate.default(y, m, d, false);
        lunarData.lunarData.forEach(function (o) {
          var base = new Date(o.year, o.month - 1, o.day);
          var diff = Math.ceil((base - new Date(y, m - 1, d)) / 864e5);
          if (diff >= 0 && diff < o.term) res = new LunarDate.default(o.lunarYear, o.lunarMonth, o.lunarDay + diff, o.isLeap);
        });
        return res;
      };
      module.exports = { solarToLunar: exports.solarToLunar };
    },
    /* 14 */
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.solarToLunar = exports.lunarToSolar = void 0;
      var LunarDate = __webpack_require__(3);
      var lunarData = __webpack_require__(7);
      __webpack_require__(4);
      __webpack_require__(5);
      exports.solarToLunar = function (y, m, d) {
        var res = new LunarDate.default(y, m, d);
        lunarData.lunarData.forEach(function (o) {
          var base = new Date(o.year, o.month - 1, o.day);
          var diff = Math.ceil((base - new Date(y, m - 1, d)) / 864e5);
          if (diff >= 0 && diff < o.term) res = new LunarDate.default(o.lunarYear, o.lunarMonth, o.lunarDay + diff, o.isLeap);
        });
        return res;
      };
      exports.lunarToSolar = function (ly, lm, ld, isLeap) {
        var u = {};
        lunarData.lunarData.forEach(function (o) {
          var ok = o.lunarYear === ly && o.lunarMonth === lm && o.lunarDay === ld;
          if (isLeap) ok = ok && o.isLeap === isLeap;
          var a = new Date(o.year, o.month - 1, o.day);
          if (ok) u = { year: a.getFullYear(), month: a.getMonth() + 1, day: a.getDate() };
        });
        return u;
      };
      module.exports = { solarToLunar: exports.solarToLunar, lunarToSolar: exports.lunarToSolar };
    },
    /* 15..21 placeholders */
    function (module, exports) { "use strict"; },
    function (module, exports, __webpack_require__) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var a = __webpack_require__(1);
      var b = __webpack_require__(2);
      var c = __webpack_require__(6);
      var d = __webpack_require__(12);
      module.exports = {
        solarToLunar: function (date) {
          var fd = b.formatDate(date);
          return d.solarToLunar(fd.year, fd.month, fd.day);
        },
        lunarToSolar: c.lunarToSolar,
        getSolarTerm: function (y, m) {
          return a.getSolarTerm(y, m);
        },
        getYearSolarTerm: function (y) {
          return a.getYearSolarTerm(y);
        },
        getNearSolarTerm: function (date) {
          return a.getNearSolarTerm(date);
        }
      };
    }
  ]);
});